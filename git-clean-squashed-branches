#!/bin/bash

# Script to automatically prune branches that have been merged,
# possibly after squashing.  You must have the `gh` github cli
# tool installed and authenticated to run, as well as `jq`.
#
# Asks for confirmation before taking any actions, and ultimately
# calls `git branch -d`, not -D, so it won't delete branches that
# haven't even been pushed yet.
#
# Run with --verbose to see detailed info.

set -e

VERBOSE=0
case "$1" in
    -v|--verbose)
        VERBOSE=1
        ;;
    -*)
        echo "Unknown option: $1"
        exit 1
        ;;
esac

function check-merged() {
    branch="$1"
    pr=$(gh pr list --json number --state=merged --head="$branch" | jq -r '.[0].number')
    if [ -z "$pr" -o "$pr" = "null" ]; then
        [ "$VERBOSE" -gt 0 ] && echo "branch '$branch' has not been merged"
        return 1
    fi

    commits_not_in_main=$(git log --format=format:%H main.."$branch" 2>/dev/null | sort | tr '\n' ' ')
    if [ 0 -ne "$?" ]; then
        [ "$VERBOSE" -gt 0 ] && echo "branch '$branch' is unknown"
        return 1
    fi
    if [ -z "${commits_not_in_main}" ]; then
        echo "branch '$branch' has been fully merged"
        return 0
    fi

    commits_in_pr=$(gh pr view --json commits "$pr" | jq -r '.commits[] | .oid' | sort | tr '\n' ' ')
    if [ "${commits_not_in_main}" '==' "${commits_in_pr}" ]; then
        [ "$VERBOSE" -gt 0 ] && echo "branch '$branch' has been fully merged"
        return 0
    else
        if [ "$VERBOSE" -gt 0 ]; then
            echo "branch '$branch' appears to have unmerged commits:"
            comm -1 -3 <(git log --format=format:%H main.."$branch" | sort) <(gh pr view --json commits "$pr" | jq -r '.commits[] | .oid' | sort)
        fi
        return 1
    fi
}

echo "Scanning branches for eligibility, this may take some time."

BRANCHES_TO_DELETE=()
for branch in $(git branch | egrep -v "(^\*|main|master|dev)"); do
    if check-merged "$branch"; then
        BRANCHES_TO_DELETE+=("$branch")
    fi
done

echo
echo "The following ${#BRANCHES_TO_DELETE[@]} local branches have been merged:"
echo "  ${BRANCHES_TO_DELETE[@]}"
echo "Should I delete them? [y/N] "
read DELETE_CONFIRMATION
case "$DELETE_CONFIRMATION" in
    y|Y|yes|YES)
        echo "Deleting ${#BRANCHES_TO_DELETE[@]} local branches."
        git branch -d "${BRANCHES_TO_DELETE[@]}"
        ;;
    *)
        echo "OK, nevermind."
        ;;
esac
